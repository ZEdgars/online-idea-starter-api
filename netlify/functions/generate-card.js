// generate-card.js

// 1. Import the Google GenAI SDK
const { GoogleGenAI } = require('@google/genai');

// The single, precise prompt that guides Gemini (Update this from your Step 1.2)
const PROMPT = "Generate a single, unique, creative constraint or unexpected idea starter for a design thinking workshop. The output must be concise, highly specific, and actionable. Maximum length is 7 words. Must be a standalone phrase. Ensure the context is professional yet surprising (e.g., 'Involve a quantum computer' or 'Be inspired by the chaos of a toddler's room').";

// The 'exports.handler' function is what Netlify runs when the public URL is accessed.
exports.handler = async (event, context) => {
Â  // 2. Initialize the AI Client
Â  if (!process.env.GEMINI_API_KEY) {
Â  Â  Â  return {
Â  Â  Â  Â  Â  statusCode: 500,
Â  Â  Â  Â  Â  body: JSON.stringify({ error: "API Key not configured." }),
Â  Â  Â  };
Â  }
Â Â 
Â  const ai = new GoogleGenAI({apiKey: process.env.GEMINI_API_KEY});Â 

Â  try {
Â  Â  // 3. Call the Gemini APIÂ 
Â  Â  const response = await ai.models.generateContent({
Â  Â  Â  Â  model: "gemini-2.5-flash",Â 
Â  Â  Â  Â  contents: [
Â  Â  Â  Â  Â  {role: "user", parts: [{text: PROMPT}]}
Â  Â  Â  Â  ],
Â  Â  Â  Â  config: {
Â  Â  Â  Â  Â  Â  temperature: 0.9, // High creativity
Â  Â  Â  Â  Â  Â  // ðŸ›‘ FINAL FIX: Removed thinkingConfig block and set maxOutputTokens very high 
            // to bypass the excessive internal thought token consumption.
Â  Â  Â  Â  Â  Â  maxOutputTokens: 2048 
Â  Â  Â  Â  }
Â  Â  });

    // Guard clause (original fix) remains to prevent crash on undefined text
    if (!response.text) {
        console.error("Gemini API Error: Response text was null or undefined. Full Response:", JSON.stringify(response));
        return {
            statusCode: 500,
            body: JSON.stringify({ error: "Gemini response was empty or blocked (e.g., safety filtering)." }),
        };
    }

Â  Â  const generatedText = response.text.trim();

Â  Â  // 4. Return the result securely to the frontend
Â  Â  return {
Â  Â  Â  statusCode: 200,
Â  Â  Â  headers: {
Â  Â  Â  Â  "Content-Type": "application/json",
Â  Â  Â  Â  "Access-Control-Allow-Origin": "*",Â 
Â  Â  Â  Â  "Access-Control-Allow-Methods": "GET"
Â  Â  Â  },
Â  Â  Â  body: JSON.stringify({ cardText: generatedText }),
Â  Â  };

Â  } catch (error) {
Â  Â  // Log the full error object to Netlify's Function Logs
Â  Â  console.error("Gemini API Error:", error.message || error);Â 
Â  Â Â 
Â  Â  // Check for a specific API error message to return to the user (optional)
Â  Â  let userErrorMessage = "Failed to generate card content due to a server error.";

Â  Â  if (error.message && error.message.includes("API key not valid")) {
Â  Â  Â  Â  userErrorMessage = "Authentication failed: API Key may be invalid or restricted.";
Â  Â  } else if (error.message && error.message.includes("403")) {
Â  Â  Â  Â  userErrorMessage = "Permission denied: API Key may lack necessary permissions.";
Â  Â  } else if (error.message && error.message.includes("Invalid JSON payload")) {
         // Catch the specific error you just saw
         userErrorMessage = "Configuration error: The AI model configuration is invalid.";
    }

Â  Â  return {
Â  Â  Â  statusCode: 500,
Â  Â  Â  body: JSON.stringify({ error: userErrorMessage }),
Â  Â  };
Â  }
};